import React, { useState, useEffect } from 'react';
import { Timer, Check, X, Award } from 'lucide-react';

const QuadraticEquationQuiz = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [answers, setAnswers] = useState({});
  const [timeLeft, setTimeLeft] = useState(90 * 60); // 1h 30min in seconds
  const [quizStarted, setQuizStarted] = useState(false);
  const [name, setName] = useState('');
  const [studentId, setStudentId] = useState('');
  const [showExplanation, setShowExplanation] = useState(false);

  useEffect(() => {
    if (quizStarted && timeLeft > 0) {
      const timer = setInterval(() => {
        setTimeLeft(prevTime => prevTime - 1);
      }, 1000);
      return () => clearInterval(timer);
    } else if (timeLeft === 0 && quizStarted) {
      handleSubmit();
    }
  }, [quizStarted, timeLeft]);

  const questions = [
    {
      question: "Solve the quadratic equation: x² + 7x + 12 = 0",
      options: [
        "x = -3, x = -4",
        "x = 3, x = 4",
        "x = -7 ± √(49 - 48) / 2",
        "x = -6, x = -2"
      ],
      correctAnswer: "x = -3, x = -4",
      explanation: "Using the quadratic formula with a=1, b=7, c=12:\nx = (-7 ± √(49-48))/2 = (-7 ± 1)/2 = -4 or -3\nAlternatively, factoring: x² + 7x + 12 = (x+3)(x+4) = 0, so x = -3 or x = -4"
    },
    {
      question: "For the quadratic equation 2x² - 5x - 3 = 0, what is the value of the discriminant?",
      options: [
        "25",
        "49",
        "13",
        "37"
      ],
      correctAnswer: "49",
      explanation: "The discriminant is b² - 4ac. For 2x² - 5x - 3 = 0, we have a=2, b=-5, c=-3\nDiscriminant = (-5)² - 4(2)(-3) = 25 + 24 = 49"
    },
    {
      question: "What are the solutions to the equation 3x² + 6x + 3 = 0?",
      options: [
        "x = -1, x = -1",
        "x = -1",
        "x = -1 ± √3",
        "No real solutions"
      ],
      correctAnswer: "x = -1",
      explanation: "We can factor out 3: 3(x² + 2x + 1) = 0, which gives 3(x+1)² = 0\nSo x = -1 is the only solution (a repeated root)"
    },
    {
      question: "Using the quadratic formula, solve 4x² - 12x + 9 = 0",
      options: [
        "x = 3/2",
        "x = 3 or x = 3/4",
        "x = -3/2",
        "x = 3/2 or x = 3/2"
      ],
      correctAnswer: "x = 3/2",
      explanation: "Using the quadratic formula with a=4, b=-12, c=9:\nx = (12 ± √(144-144))/8 = (12 ± 0)/8 = 3/2\nThis is a perfect square: 4x² - 12x + 9 = (2x-3)² = 0, so x = 3/2 is the only solution"
    },
    {
      question: "For what values of k will the equation x² + kx + 25 = 0 have exactly one solution?",
      options: [
        "k = 0",
        "k = 10",
        "k = ±10",
        "k = -10"
      ],
      correctAnswer: "k = ±10",
      explanation: "For exactly one solution, the discriminant must be zero:\nb² - 4ac = 0\nk² - 4(1)(25) = 0\nk² - 100 = 0\nk² = 100\nk = ±10"
    },
    {
      question: "What is the relationship between the roots of a quadratic equation x² + bx + c = 0?",
      options: [
        "Sum of roots = b, product of roots = c",
        "Sum of roots = -b, product of roots = c",
        "Sum of roots = c, product of roots = b",
        "Sum of roots = -c, product of roots = b"
      ],
      correctAnswer: "Sum of roots = -b, product of roots = c",
      explanation: "For a quadratic equation in the form x² + bx + c = 0:\nIf the roots are r and s, then x² + bx + c = (x-r)(x-s) = x² - (r+s)x + rs\nComparing coefficients: -b = r+s and c = rs\nSo, sum of roots = -b and product of roots = c"
    },
    {
      question: "Solve: 2x² + x - 6 = 0",
      options: [
        "x = 1.5, x = -2",
        "x = -1.5, x = 2",
        "x = 3/2, x = -2",
        "x = -3/2, x = 2"
      ],
      correctAnswer: "x = 3/2, x = -2",
      explanation: "Using the quadratic formula with a=2, b=1, c=-6:\nx = (-1 ± √(1+48))/4 = (-1 ± 7)/4\nx = (-1+7)/4 = 3/2 or x = (-1-7)/4 = -2\nAlternatively, by factoring: 2x² + x - 6 = (2x+3)(x-2) = 0, so x = -3/2 or x = 2"
    },
    {
      question: "Which of the following quadratic equations has complex roots?",
      options: [
        "x² - 4x + 4 = 0",
        "x² - 5x + 6 = 0",
        "x² + 2x + 5 = 0",
        "x² - 2x - 3 = 0"
      ],
      correctAnswer: "x² + 2x + 5 = 0",
      explanation: "For complex roots, the discriminant must be negative.\nFor x² + 2x + 5 = 0: b² - 4ac = 2² - 4(1)(5) = 4 - 20 = -16\nSince the discriminant is negative, this equation has complex roots"
    },
    {
      question: "If one root of the quadratic equation x² - 5x + k = 0 is 2, what is the value of k?",
      options: [
        "k = 6",
        "k = -6",
        "k = 10",
        "k = 3"
      ],
      correctAnswer: "k = 6",
      explanation: "If x = 2 is a root, then it satisfies the equation:\n2² - 5(2) + k = 0\n4 - 10 + k = 0\nk = 6"
    },
    {
      question: "The graph of y = ax² + bx + c crosses the x-axis at x = -1 and x = 3. If a = 2, what is the value of b?",
      options: [
        "b = -4",
        "b = 4",
        "b = -2",
        "b = 2"
      ],
      correctAnswer: "b = -4",
      explanation: "If the graph crosses the x-axis at x = -1 and x = 3, then:\ny = 2x² + bx + c = 2(x+1)(x-3)\nExpanding: 2x² + bx + c = 2(x² - 2x - 3) = 2x² - 4x - 6\nComparing coefficients: b = -4 and c = -6"
    }
  ];

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
  };

  const handleAnswerChange = (answer) => {
    setAnswers({
      ...answers,
      [currentQuestion]: answer
    });
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setShowExplanation(false);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
      setShowExplanation(false);
    }
  };

  const handleSubmit = () => {
    let newScore = 0;
    questions.forEach((question, index) => {
      if (answers[index] === question.correctAnswer) {
        newScore++;
      }
    });
    setScore(newScore);
    setShowResults(true);
  };

  const handleStartQuiz = () => {
    if (name.trim() === '' || studentId.trim() === '') {
      alert('Please enter your name and student ID');
      return;
    }
    setQuizStarted(true);
  };

  const handleJumpToQuestion = (index) => {
    setCurrentQuestion(index);
    setShowExplanation(false);
  };

  if (!quizStarted) {
    return (
      <div className="flex flex-col items-center justify-center p-8 max-w-2xl mx-auto bg-white rounded-lg shadow-md">
        <h1 className="text-2xl font-bold mb-6">Quadratic Equations Quiz</h1>
        <p className="mb-4 text-gray-700">Time limit: 1 hour 30 minutes</p>
        <p className="mb-6 text-gray-700">10 questions to test your understanding of quadratic equations and the quadratic formula</p>
        
        <div className="w-full mb-4">
          <label className="block text-gray-700 mb-2">Name:</label>
          <input
            type="text"
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            placeholder="Enter your full name"
          />
        </div>
        
        <div className="w-full mb-6">
          <label className="block text-gray-700 mb-2">Student ID:</label>
          <input
            type="text"
            value={studentId}
            onChange={(e) => setStudentId(e.target.value)}
            className="w-full p-2 border border-gray-300 rounded"
            placeholder="Enter your student ID"
          />
        </div>
        
        <button
          onClick={handleStartQuiz}
          className="px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
        >
          Start Quiz
        </button>
      </div>
    );
  }

  if (showResults) {
    return (
      <div className="flex flex-col items-center justify-center p-8 max-w-2xl mx-auto bg-white rounded-lg shadow-md">
        <h1 className="text-2xl font-bold mb-4">Quiz Results</h1>
        <div className="flex items-center justify-center mb-6">
          <Award className="text-yellow-500 mr-2" size={32} />
          <p className="text-xl">
            {name}, your score: {score} out of {questions.length} ({Math.round((score / questions.length) * 100)}%)
          </p>
        </div>
        
        <div className="w-full">
          <h2 className="text-xl font-semibold mb-4">Review:</h2>
          {questions.map((q, index) => (
            <div key={index} className="mb-6 p-4 border rounded">
              <p className="font-medium mb-2">Question {index + 1}: {q.question}</p>
              <p className="mb-1">Your answer: 
                <span className={answers[index] === q.correctAnswer ? "text-green-600 font-medium" : "text-red-600 font-medium"}>
                  {" "}{answers[index] || "Not answered"}
                  {" "}{answers[index] === q.correctAnswer ? <Check className="inline" size={16} /> : <X className="inline" size={16} />}
                </span>
              </p>
              <p className="text-green-600 font-medium mb-2">Correct answer: {q.correctAnswer}</p>
              <div className="bg-gray-50 p-2 rounded">
                <p className="text-sm font-medium mb-1">Explanation:</p>
                <p className="text-sm whitespace-pre-line">{q.explanation}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col p-6 max-w-3xl mx-auto bg-white rounded-lg shadow-md">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-xl font-bold">Quadratic Equations Quiz</h1>
        <div className="flex items-center">
          <Timer className="mr-2" size={20} />
          <span className={`font-mono ${timeLeft < 300 ? 'text-red-600 font-bold' : ''}`}>
            Time left: {formatTime(timeLeft)}
          </span>
        </div>
      </div>
      
      <div className="mb-2">
        <div className="flex justify-between mb-2">
          <span>Student: {name}</span>
          <span>ID: {studentId}</span>
        </div>
        <div className="w-full bg-gray-200 h-2 rounded-full">
          <div 
            className="bg-blue-600 h-2 rounded-full" 
            style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
          ></div>
        </div>
        <div className="text-sm text-gray-600 mt-1">
          Question {currentQuestion + 1} of {questions.length}
        </div>
      </div>
      
      <div className="p-4 border rounded mb-6">
        <h2 className="text-lg font-semibold mb-4">{questions[currentQuestion].question}</h2>
        <div className="space-y-3">
          {questions[currentQuestion].options.map((option, index) => (
            <label key={index} className="flex items-start">
              <input
                type="radio"
                name={`question-${currentQuestion}`}
                value={option}
                checked={answers[currentQuestion] === option}
                onChange={() => handleAnswerChange(option)}
                className="mt-1 mr-2"
              />
              <span>{option}</span>
            </label>
          ))}
        </div>
      </div>
      
      {showExplanation && (
        <div className="p-4 bg-blue-50 border border-blue-200 rounded mb-6">
          <h3 className="font-medium mb-2">Explanation:</h3>
          <p className="whitespace-pre-line">{questions[currentQuestion].explanation}</p>
        </div>
      )}
      
      <div className="flex justify-between mb-6">
        <button
          onClick={handlePrevious}
          disabled={currentQuestion === 0}
          className={`px-4 py-2 rounded ${currentQuestion === 0 ? 'bg-gray-300 cursor-not-allowed' : 'bg-gray-200 hover:bg-gray-300'}`}
        >
          Previous
        </button>
        
        <button
          onClick={() => setShowExplanation(!showExplanation)}
          className="px-4 py-2 bg-blue-100 text-blue-800 rounded hover:bg-blue-200"
        >
          {showExplanation ? 'Hide Explanation' : 'Show Explanation'}
        </button>
        
        {currentQuestion < questions.length - 1 ? (
          <button
            onClick={handleNext}
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Next
          </button>
        ) : (
          <button
            onClick={handleSubmit}
            className="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700"
          >
            Submit
          </button>
        )}
      </div>
      
      <div className="flex flex-wrap gap-2 justify-center">
        {questions.map((_, index) => (
          <button
            key={index}
            onClick={() => handleJumpToQuestion(index)}
            className={`w-8 h-8 rounded-full flex items-center justify-center text-sm
              ${currentQuestion === index ? 'bg-blue-600 text-white' : 
                 answers[index] ? 'bg-green-100 text-green-800 border border-green-300' : 'bg-gray-200 hover:bg-gray-300'}`}
          >
            {index + 1}
          </button>
        ))}
      </div>
    </div>
  );
};

export default QuadraticEquationQuiz;
